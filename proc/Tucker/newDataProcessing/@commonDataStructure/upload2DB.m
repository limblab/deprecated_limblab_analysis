function upload2DB(cds)
    %this is a method function of the commonDataStructure class and
    %should be saved in the @commonDataStructure folder
    %
    %upload2DB takes the current cds object and exports the data in it to
    %the database on vfsmmilllerwiki.fsm.northwestern.edu
    
    %connect to the LLSessionsDB to push metadata about the file
    try
        conn=database('LLSessionsDB','LLMatlabScript','mvemjlht','Vendor','PostgreSQL','Server','vfsmmillerwiki.fsm.northwestern.edu');
    catch 
        warning('file2cds:databaseError','Failed to connect to the LLSessionsDB database. Unable to write data from cds to the database')
        return
    end
    
    %check whether a session entry for the current data already exists:
    tmp=fetch(conn,['select * from sessions where sourceFile=',cds.meta.rawFileName]);
    if ~isempty(tmp)
        warning('upload2DB:sessionAlreadyInDatabase','A session from a file with the same name as the source of this cds already exists in the database. Skipping this entry. If you want to replace the old entry with this data, purge the database of existing data keyed to this session and then re-try upload2DB')
        return
    end
    %push metadata to the sessions table:
    colNames={  'monkey',...
                'date',... 
                'time',... 
                'implantID',... 
                'task',... 
                'sourceFile',... 
                'cdsVersion',... 
                'duration',... 
                'labNum',... 
                'hasEmg',... 
                'hasLfp',... 
                'hasKinematics',... 
                'hasForce',... 
                'hasAnalog',... 
                'hasUnits',... 
                'isSorted',... 
                'numUnits',... 
                'numSorted',... 
                'numDualUnits',... 
                'hasTriggers',... 
                'hasChaoticLoad',... 
                'hasBumps',... 
                'numTrials',... 
                'numReward',... 
                'numAbort',... 
                'numFail',... 
                'numIncomplete'... 
                };
            d=strsplit(cds.meta.dateTime);
    data={      cds.meta.monkey,... 
                d{1},... %this will almost certainly need formatting to match the postgreSQL date type
                d{2},... 
                cds.meta.array,... 
                cds.meta.task,...
                cds.meta.rawFileName,...  
                cds.meta.cdsVersion,... 
                cds.meta.duration,... 
                cds.meta.lab,... 
                cds.meta.hasEmg,... 
                cds.meta.hasLfp,... 
                cds.meta.hasKinematics,... 
                cds.meta.Force,... 
                cds.meta.hasAnalog,... 
                cds.meta.hasUnits,... 
                cds.meta.isSorted,... 
                cds.meta.numUnits,... 
                cds.meta.numSorted,... 
                cds.meta.numDualUnits,... 
                cds.meta.hasTriggers,... 
                cds.meta.hasChaoticLoad,... 
                cds.meta.hasBumps,... 
                cds.meta.numtrials,... 
                cds.meta.numReward,... 
                cds.meta.numAbort,... 
                cds.meta.numFail,... 
                cds.meta.numIncomplete
        };
    datainsert(conn,'sessions',colNames,data)
    
    close(conn)
    return
    
    %push kinematics to the kinematics table:
    if cds.meta.hasKinematics
        error('upload2DB:notImplemented','uploading kinematic data not implemented')
        [r,c]=size(cds.kin);
        c=c-1;%we don't want to keep track of time in the same group as the data columns
        colNames={'monkey','date','time','timestamp','label','val'};
        dbTable=cell2table(cell(r*c,6),'VariableNames',colNames)
        
        dbTable.monkey=repmat(cds.meta.monkey,r*c,1);
        d=strsplit(cds.meta.dateTime);
        dbTable.date=repmat(d{1},r*c,1);
        dbTable.time=repmat(d{2},r*c,1);
        dbTable.timestamp=repmat(cds.kin.t,c);
        dbTable.label=reshape(repmat(cds.kin.Properties.VariableNames{2:end},r,1),r*c,1);
        dbTable.val=reshape(cds.kin{:,2:end},r*c,1);
        fastinsert(conn,'kinematics',colNames,dbTable);
        clear dbTable
        clear colNames
    end
    %push force to the force table:
    if cds.meta.hasForce
        error('upload2DB:notImplemented','uploading force data not implemented')
    end
    %push emg to the emg table:
    if cds.meta.hasEmg
        error('upload2DB:notImplemented','uploading emg data not implemented')
    end
    %push lfp to the lfp table:
    if cds.meta.hasLfp
        error('upload2DB:notImplemented','uploading lfp data not implemented')
    end
    %push units to the units table:
    if cds.meta.hasUnits
        error('upload2DB:notImplemented','uploading unit data not implemented')
    end
    %push trials to the trials table:
    if cds.meta.hasTrials
        error('upload2DB:notImplemented','uploading trial data not implemented')
    end
    %push analog data to the analog table:
    if cds.meta.hasAnalog
        error('upload2DB:notImplemented','uploading analog data not implemented')
    end
    %push triggers to the triggers table:
    if cds.meta.hasTriggers
        error('upload2DB:notImplemented','uploading trigger data not implemented')
    end
    
    
    
    
    