function [figure_list,data_struct]=compute_electrode_stability_plasticity(fpath,input_data)
    %loads all .mat files in the specified directory. The files should
    %contain either a tuning struct array, or a tuning dataset, as
    %generated by get_PDs. Struct arrays are converted to datasets inside
    %compute_electrode_stability. The tuning data should be for the
    %electrodes, as compute_electrode_stability assumes that the same units
    %are present in each file, and does not handle unit addition or
    %dropout.

    %required fields in the input_data struct:
    %num_channels   the number of channels in the array. This is a
    %               workaround till I can implement something that actually
    %               looks at the data to see how many channels are in the
    %               files loaded
    %min_moddepth   the minimum modulation depth to consider a unit when
    %               computing the number of units and change in number of
    %               units
    foldercontents=dir(fpath);
    fnames={foldercontents.name};%extracts just the names from the foldercontents
    data_struct.file_list=[];
    figure_list=[];
    ctr=0;
    for i=1:length(foldercontents)
        if (length(fnames{i})>3)
        
            %skip things that aren't files
            if exist(strcat(fpath,fnames{i}),'file')~=2
                continue
            end
            %generate a new path to the source file of shortcuts
            temppath=follow_links(strcat(fpath,fnames{i}));
            if strcmp(temppath(end-3:end),'.mat')
                disp(strcat('Working on: ',temppath))
                ctr=ctr+1;
                try
                    disp('loading pd dataset from file')
                    temp1=load(temppath);
                    if length(fieldnames(temp1))==1
                        fields=fieldnames(temp1); 
                        temp1=temp1.(fields{1});
                        if isstruct(temp1)
                            data_struct.all_pds{ctr}=get_pd_table(tuning_data,'vel');
                        else
                            data_struct.all_pds{ctr}=temp1;
                        end
                        clear temp
                        data_struct.file_list=strcat(data_struct.file_list,',',temppath);
                    elseif isempty(fieldnames(temp1))
                        error('compute_generic_stability_metrics:NoVariableInFile',['Tried to load' temppath 'but found no variables in the file'])
                    else
                        error('compute_generic_stability_metrics:MultipleVariableInFile',['Tried to load' temppath 'but found multiple variables in the file'])
                    end
                catch temperr %catches the error in a MException class object called temperr
                    disp(strcat('Failed to process: ', temppath))
                    disp(temperr.identifier)
                    disp(temperr.message)
                end
            end
        end
    end
    if isempty(data_struct.file_list)
        error('compute_generic_stability_metrics:NoFilesFound','Found no .mat files to load')
    end
              
    %now that we have loaded all the files, get the pd and moddepth on each
    % channel each day into a single matrix
    data_struct.pdmat=zeros(input_data.num_channels,length(data_struct.all_pds));
    data_struct.moddepthmat=zeros(input_data.num_channels,length(data_struct.all_pds));
    data_struct.dir_CImat=[];
    data_struct.moddepth_CImat=[];
    for i=1:length(data_struct.all_pds)
        for j=1:length(data_struct.all_pds{i}.dir)
            if data_struct.all_pds{i}.channel(j)<=input_data.num_channels
                data_struct.pdmat(data_struct.all_pds{i}.channel(j),i)=data_struct.all_pds{i}.dir(j);
                data_struct.moddepthmat(data_struct.all_pds{i}.channel(j),i)=data_struct.all_pds{i}.moddepth(j);
                data_struct.dir_CImat(data_struct.all_pds{i}.channel(j),i)=abs(data_struct.all_pds{i}.dir_CI(j,1)-data_struct.all_pds{i}.dir_CI(j,2));
                data_struct.moddepth_CImat(data_struct.all_pds{i}.channel(j),i)=abs(data_struct.all_pds{i}.moddepth_CI(j,1)-data_struct.all_pds{i}.moddepth_CI(j,2));
            end
        end
    end
    
    %assume that we have a full list of channels because we generated pdmat
    %and moddepth mat with a fixed dimension and limited our loop to only
    %those channels with the same dimension
    data_struct.chan_list=[1:input_data.num_channels]';
    
    %now make a smaller matrix containing only those rows where the
    %moddepth on the first day was larger than the limit set in input_data
    data_struct.welltuned_pdmat=data_struct.pdmat(data_struct.moddepthmat(data_struct.chan_list,1)>input_data.min_moddepth,:);
    data_struct.welltuned_moddepthmat=data_struct.moddepthmat(data_struct.moddepthmat(data_struct.chan_list,1)>input_data.min_moddepth,:);
    data_struct.welltuned_list=data_struct.chan_list(data_struct.moddepthmat(data_struct.chan_list,1)>input_data.min_moddepth,1);
    
    %reducing the list of studied electrodes to the 16 of interest
    %by creating two lists with interesting pds
    data_struct.stimulated_list=[34 38 51 48 44 64 55 61]';
    data_struct.controls_list=[49 54 46 56 35 53 58 47]'; %those two lists are in matching order (1 is coupled with 20)
    data_struct.stimulated_dir=[];
    data_struct.controls_dir=[];
    data_struct.stimulated_moddepth=[];
    data_struct.controls_moddepth=[];
    data_struct.stimulated_dir_CI=[];
    data_struct.controls_dir_CI=[];
    data_struct.stimulated_moddepth_CI=[];
    data_struct.controls_moddepth_CI=[];
       
    for i=1:length(data_struct.stimulated_list)
       data_struct.stimulated_dir=[data_struct.stimulated_dir;data_struct.pdmat((data_struct.stimulated_list(i)),:)];
       data_struct.controls_dir=[data_struct.controls_dir;data_struct.pdmat((data_struct.controls_list(i)),:)];
       data_struct.stimulated_moddepth=[data_struct.stimulated_moddepth;data_struct.moddepthmat((data_struct.stimulated_list(i)),:)];
       data_struct.controls_moddepth=[data_struct.controls_moddepth;data_struct.moddepthmat((data_struct.controls_list(i)),:)];
       data_struct.stimulated_dir_CI=[data_struct.stimulated_dir_CI;data_struct.dir_CImat((data_struct.stimulated_list(i)),:)];
       data_struct.controls_dir_CI=[data_struct.controls_dir_CI;data_struct.dir_CImat((data_struct.controls_list(i)),:)];
       data_struct.stimulated_moddepth_CI=[data_struct.stimulated_moddepth_CI;data_struct.moddepth_CImat((data_struct.stimulated_list(i)),:)];
       data_struct.controls_moddepth_CI=[data_struct.controls_moddepth_CI;data_struct.moddepth_CImat((data_struct.controls_list(i)),:)];
    end
               
    %%
    %make a few plots:
    %----PDs
    %--------absolute values
    %------------stimulated
    temp1=data_struct.stimulated_dir;
    temp1(temp1>pi)=temp1(temp1>pi)-2*pi;
    temp1(temp1<-pi)=temp1(temp1<-pi)+2*pi;
    figure_list=[figure_list figure('name','PD_absoluteValues_16')];
    color_order=jet(8);
    subplot(2,1,1);
    
    for i=1:8
        [x,a]=fix_angles(temp1(i,:));
        plot(x,a,'-+','color',color_order(i,:));
        hold on
    end
               
    title(['Absolute values of PDs for stimulated channels'])
    xlabel('day')
    ylabel('PD (rad)')
    h=legend(num2str(data_struct.stimulated_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-4 4])
    
    %------------controls
    temp2=data_struct.controls_dir;
    temp2(temp2>pi)=temp2(temp2>pi)-2*pi;
    temp2(temp2<-pi)=temp2(temp2<-pi)+2*pi;    
    subplot(2,1,2);

    for i=1:8
        [x,a]=fix_angles(temp2(i,:));
        plot(x,a,'-+','color',color_order(i,:));
        hold on
    end
    title(['Absolute values of in PDs for control channels'])
    xlabel('day')
    ylabel('PD (rad)')
    h=legend(num2str(data_struct.controls_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-4 4])
    set(figure_list(length(figure_list)),'Position',[100 100 1000 1000])
    
    %--------changing values: from 0
    %------------stimulated
    temp1=data_struct.stimulated_dir;
    mask=repmat(temp1(:,1),1,size(temp1,2));
    temp1=temp1-mask;
    temp1(temp1>pi)=temp1(temp1>pi)-2*pi;
    temp1(temp1<-pi)=temp1(temp1<-pi)+2*pi;
    figure_list=[figure_list figure('name','PD_changeFrom0_16')];
    subplot(2,1,1);
    
    for i=1:8
        [x,a]=fix_angles(temp1(i,:));
        plot(x,a,'-+','color',color_order(i,:));
        hold on
    end
               
    title(['Change in PD from first day for stimulated channels'])
    xlabel('day')
    ylabel('change in PD (rad)')
    h=legend(num2str(data_struct.stimulated_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-4 4])
       
    %------------controls
    temp2=data_struct.controls_dir;
    mask=repmat(temp2(:,1),1,size(temp2,2));
    temp2=temp2-mask;
    temp2(temp2>pi)=temp2(temp2>pi)-2*pi;
    temp2(temp2<-pi)=temp2(temp2<-pi)+2*pi;
    subplot(2,1,2);
    
    for i=1:8
        [x,a]=fix_angles(temp2(i,:));
        plot(x,a,'-+','color',color_order(i,:));
        hold on
    end
    title(['Change in PD from first day for control channels'])
    xlabel('day')
    ylabel('change in PD (rad)')
    h=legend(num2str(data_struct.controls_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-4 4])
    set(figure_list(length(figure_list)),'Position',[100 100 1000 1000])
    
    %--------changing values: from day -1
    %------------stimulated
    temp1=data_struct.stimulated_dir;
    mask=repmat(temp1(:,1),1,size(temp1,2));
    
    for i=2:size(temp1,2)
        temp1(:,i)=temp1(:,i)-mask(:,i-1);
    end   
    
    temp1(temp1>pi)=temp1(temp1>pi)-2*pi;
    temp1(temp1<-pi)=temp1(temp1<-pi)+2*pi;
    figure_list=[figure_list figure('name','PD_changeFromD-1_16')];
    subplot(2,1,1);
    
    for i=1:8
        [x,a]=fix_angles(temp1(i,:));
        plot(x,a,'-+','color',color_order(i,:));
        hold on
    end
               
    title(['Change in PD day to day for stimulated channels'])
    xlabel('day')
    ylabel('change in PD (rad)')
    h=legend(num2str(data_struct.stimulated_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-4 4])
    
    %------------controls
    temp2=data_struct.controls_dir;
    mask=repmat(temp2(:,1),1,size(temp2,2));
    
    for i=2:size(temp2,2)
        temp2(:,i)=temp2(:,i)-mask(:,i-1);
    end   
    
    temp2(temp2>pi)=temp2(temp2>pi)-2*pi;
    temp2(temp2<-pi)=temp2(temp2<-pi)+2*pi;
    subplot(2,1,2);
    
    for i=1:8
        [x,a]=fix_angles(temp2(i,:));
        plot(x,a,'-+','color',color_order(i,:));
        hold on
    end
               
    title(['Change in PD day to day for controls channels'])
    xlabel('day')
    ylabel('change in PD (rad)')
    h=legend(num2str(data_struct.controls_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-4 4])
    
    
    %----moddepths
    %--------stimulated
    temp3=data_struct.stimulated_moddepth;
    mask=repmat(temp3(:,1),1,size(temp3,2));
    temp3=temp3-mask;
    figure_list=[figure_list figure('name','moddepth_16')];
    
    set(0,'DefaultAxesColorOrder',jet(8));
    subplot(2,1,1);
    plot(temp3');
    title(['Change in modulation depth from first day for stimulated channels'])
    xlabel('day')
    ylabel('change in modulation depth')
    h=legend(num2str(data_struct.stimulated_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-6e-03 6e-03])
    
    %--------controls
    temp4=data_struct.controls_moddepth;
    mask=repmat(temp4(:,1),1,size(temp4,2));
    temp4=temp4-mask;
    
    subplot(2,1,2);
    plot(temp4');
    title(['Change in modulation depth from first day for control channels'])
    xlabel('day')
    ylabel('change in modulation depth')
    h=legend(num2str(data_struct.controls_list));
    set(h,'Location','northwestoutside')
    set(gca,'ylim',[-6e-03 6e-03])
    set(figure_list(length(figure_list)),'Position',[100 100 1000 1000])
    
  
    %----means
    av1=mean(temp1,1);
    st1=std(temp1,1);
    av2=mean(temp2,1);
    st2=std(temp2,1);
    figure_list=[figure_list figure('name','mean_PD_change_16')];
    subplot(2,1,1);
    boundedline(1:length(av1),av1,st1)
    title(['Mean change in PD from first file for stimulated channels'])
    xlabel('file number')
    ylabel('change in PD')
    subplot(2,1,2);
    boundedline(1:length(av2),av2,st2)
    title(['Mean change in PD from first file for control channels'])
    xlabel('file number')
    ylabel('change in PD')
    format_for_lee(figure_list(length(figure_list)))
    set(figure_list(length(figure_list)),'Position',[100 100 1000 1000])
    set(gca,'Layer','top')
    set(gca,'ylim',[-10 10])
end